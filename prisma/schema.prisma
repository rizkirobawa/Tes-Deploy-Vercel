// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  fullName        String         @map("full_name")
  familyName      String?        @map("family_name")
  phoneNumber     String         @map("phone_number")
  email           String         @unique
  password        String
  identityType    String?        @map("identity_type")
  identityNumber  String?        @map("identity_number")
  nationality     String?
  emailIsVerified Boolean        @default(false) @map("email_isverified")
  role            Role           @default(USER)
  booking         Booking[]
  otp             Otp?
  notification    Notification[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Booking {
  id          Int         @id @default(autoincrement())
  bookingCode String      @map("booking_code")
  status      String
  expiredPaid DateTime    @map("expired_paid")
  totalPrice  Float       @map("total_price")
  flight      Flight      @relation(fields: [flightId], references: [id])
  flightId    Int         @map("flight_id")
  user        User        @relation(fields: [userId], references: [id])
  userId      Int         @map("user_id")
  passenger   Passenger[]
  Payment     Payment[]

  @@map("bookings")
}

model Otp {
  id        Int      @id @default(autoincrement())
  code      String
  createdAt DateTime @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique @map("user_id")

  @@map("otp")
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  createdAt DateTime @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")

  @@map("notifications")
}

model Payment {
  id        Int      @id @default(autoincrement())
  name      String
  paidAt    DateTime @map("paid_at")
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId Int      @map("booking_id")

  @@map("payments")
}

model Flight {
  id                 Int       @id @default(autoincrement())
  flightNumber       String    @map("flight_number")
  departureTime      DateTime  @map("departure_time")
  arrivalTime        DateTime  @map("arrival_time")
  departureAirport   Airport   @relation("departure_airport", fields: [departureAirportId], references: [id])
  departureAirportId Int       @map("departure_airport_id")
  arrivalAirport     Airport   @relation("arrival_airport", fields: [arrivalAirportId], references: [id])
  arrivalAirportId   Int       @map("arrival_airport_id")
  ticket             Ticket[]
  booking            Booking[]

  @@map("flights")
}

model City {
  id       Int       @id @default(autoincrement())
  name     String
  cityIata String    @map("city_iata")
  country  String
  airport  Airport[]

  @@map("cities")
}

model Airport {
  id                 Int      @id @default(autoincrement())
  name               String
  airportCode        String   @map("airport_code")
  city               City     @relation(fields: [cityId], references: [id])
  cityId             Int      @map("city_id")
  airportAsDeparture Flight[] @relation("departure_airport")
  airportAsArrival   Flight[] @relation("arrival_airport")

  @@map("airports")
}

model Airplane {
  id                Int                 @id @default(autoincrement())
  model             String
  passengerCapacity Int                 @map("passenger_capacity")
  baggageCapacity   Int                 @map("baggage_capacity")
  cabinCapacity     Int                 @map("cabin_capacity")
  inFlightFacility  String              @map("in_flight_facility")
  airline           Airline             @relation(fields: [airlineId], references: [id])
  airlineId         Int                 @map("airline_id")
  airplaneSeatClass AirplaneSeatClass[]

  @@map("airplanes")
}

model Airline {
  id          Int        @id @default(autoincrement())
  name        String
  airlineIata String     @map("airline_iata")
  logo_url    String?
  logo_id     String?
  airplane    Airplane[]

  @@map("airlines")
}

model AirplaneSeatClass {
  id         Int      @id @default(autoincrement())
  type       String
  totalSeat  Int      @map("total_seat")
  airplane   Airplane @relation(fields: [airplaneId], references: [id])
  airplaneId Int      @map("airplane_id")
  ticket     Ticket?

  @@map("airplane_seat_class")
}

model Ticket {
  id                  Int               @id @default(autoincrement())
  price               Float
  tax                 Float
  flight              Flight            @relation(fields: [flightId], references: [id])
  flightId            Int               @map("flight_id")
  airplaneSeatClass   AirplaneSeatClass @relation(fields: [airplaneSeatClassId], references: [id])
  airplaneSeatClassId Int               @unique @map("airplane_seat_class_id")

  @@map("tickets")
}

model Passenger {
  id             Int      @id @default(autoincrement())
  title          String
  fullName       String   @map("full_name")
  familyName     String   @map("family_name")
  birthDate      DateTime @map("birth_date") @db.Date
  nationality    String
  identityType   String   @map("identity_type")
  issuingCountry String   @map("issuing_country")
  identityNumber String   @map("identity_number")
  expiredDate    DateTime @map("expired_date")
  ageGroup       AgeGroup @map("age_group")
  booking        Booking  @relation(fields: [bookingId], references: [id])
  bookingId      Int      @map("booking_id")

  @@map("passengers")
}

enum AgeGroup {
  ADULT
  CHILD
  BABY
}
